#ifndef CONST_DATA_H
#define CONST_DATA_H

#include <iostream>
#include <QObject>
#include <QDebug>

using namespace std;

// 版本号
const QString cszAbout = "象棋小巫师 0.2.3\n象棋百科全书 荣誉出品\n\n"
                         "欢迎登录 www.xqbase.com\n免费下载PC版 象棋巫师";

// 窗口和绘图属性
const int SQUARE_SIZE = 56;
const int BOARD_EDGE = 8;
const int BOARD_WIDTH = BOARD_EDGE + SQUARE_SIZE * 9 + BOARD_EDGE;
const int BOARD_HEIGHT = BOARD_EDGE + SQUARE_SIZE * 10 + BOARD_EDGE;

// 棋盘范围
const int RANK_TOP = 3;
const int RANK_BOTTOM = 12;
const int FILE_LEFT = 3;
const int FILE_RIGHT = 11;

// 棋子编号
const int PIECE_KING = 0;
const int PIECE_ADVISOR = 1;
const int PIECE_BISHOP = 2;
const int PIECE_KNIGHT = 3;
const int PIECE_ROOK = 4;
const int PIECE_CANNON = 5;
const int PIECE_PAWN = 6;

// 其他常数
const int MAX_GEN_MOVES = 128; // 最大的生成走法数

//棋子值对应的图片名称
const QString PIECE_NAME[] =
{
	"oo", "", "", "", "", "", "", "",
	"rk", "ra", "rb", "rn", "rr", "rc", "rp", "",
	"bk", "ba", "bb", "bn", "br", "bc", "bp", "",
};

// 判断棋子是否在棋盘中的数组
static const char ccInBoard[256] =
{
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

// 判断棋子是否在九宫的数组
static const char ccInFort[256] =
{
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

// 判断步长是否符合特定走法的数组，1=帅(将)，2=仕(士)，3=相(象)
static const char ccLegalSpan[512] =
{
	0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0
};

// 根据步长判断马是否蹩腿的数组
static const char ccKnightPin[512] =
{
	0,  0,  0,  0,  0,  0,   0,  0,   0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0, -16,  0, -16,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0, -1,   0,  0,   0,  1,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0, -1,   0,  0,   0,  1,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  16,  0,  16,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,   0
};

// 帅(将)的步长
static const char ccKingDelta[4] = {-16, -1, 1, 16};
// 仕(士)的步长
static const char ccAdvisorDelta[4] = {-17, -15, 15, 17};
// 马的步长，以帅(将)的步长作为马腿
static const char ccKnightDelta[4][2] = {{-33, -31}, {-18, 14}, {-14, 18}, {31, 33}};
// 马被将军的步长，以仕(士)的步长作为马腿
static const char ccKnightCheckDelta[4][2] = {{-33, -18}, {-31, -14}, {14, 31}, {18, 33}};


// 棋盘初始设置
static const uint8_t cucpcStartup[256] =
{
	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0, 20, 19, 18, 17, 16, 17, 18, 19, 20,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0, 21,  0,  0,  0,  0,  0, 21,  0,  0,  0,  0,  0,
	0,  0,  0, 22,  0, 22,  0, 22,  0, 22,  0, 22,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0, 14,  0, 14,  0, 14,  0, 14,  0, 14,  0,  0,  0,  0,
	0,  0,  0,  0, 13,  0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0, 12, 11, 10,  9,  8,  9, 10, 11, 12,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 判断棋子是否在棋盘中
inline bool IN_BOARD(int sq)
{
	return ccInBoard[sq] != 0;
}

// 判断棋子是否在九宫中
inline bool IN_FORT(int sq)
{
	return ccInFort[sq] != 0;
}

// 获得格子的横坐标（行数）
inline int RANK_Y(int sq)
{
	//sq / 16
	return sq >> 4;
}

// 获得格子的纵坐标（列数）
inline int FILE_X(int sq)
{
	// sq % 16
	return sq & 15;
}

// 根据纵坐标和横坐标获得格子
inline int COORD_XY(int x, int y)
{
	//x + (y * 16)
	return x + (y << 4);
}

// 翻转格子
inline int SQUARE_FLIP(int sq)
{
	return 254 - sq;
}

// 纵坐标水平镜像
inline int FILE_FLIP(int x)
{
	return 14 - x;
}

// 横坐标垂直镜像
inline int RANK_FLIP(int y)
{
	return 15 - y;
}

// 格子水平镜像
inline int MIRROR_SQUARE(int sq)
{
	return COORD_XY(FILE_FLIP(FILE_X(sq)), RANK_Y(sq));
}

// 格子垂直镜像
inline int SQUARE_FORWARD(int sq, int sd)
{
	//红方向前走一列减16
	//黑方向前走一列加16
	return sq - 16 + (sd << 5);
}

// 走法是否符合帅(将)的步长
inline bool KING_SPAN(int sqSrc, int sqDst)
{
	//之所以是一个512数组，是因为-255 < sqDst - sqSrc < 255
	//如果是符合的走法，必是在索引256的 {1, -1, 16, -16}偏移
	return ccLegalSpan[sqDst - sqSrc + 256] == 1;
}

// 走法是否符合仕(士)的步长
inline bool ADVISOR_SPAN(int sqSrc, int sqDst)
{
	//{-17, -15, 15, 17}
	return ccLegalSpan[sqDst - sqSrc + 256] == 2;
}

// 走法是否符合相(象)的步长
inline bool BISHOP_SPAN(int sqSrc, int sqDst)
{
	return ccLegalSpan[sqDst - sqSrc + 256] == 3;
}

// 相(象)眼的位置
inline int BISHOP_PIN(int sqSrc, int sqDst)
{
	return (sqSrc + sqDst) >> 1;
}

// 马腿的位置
inline int KNIGHT_PIN(int sqSrc, int sqDst)
{
	return sqSrc + ccKnightPin[sqDst - sqSrc + 256];
}

// 是否未过河
inline bool HOME_HALF(int sq, int sd)
{
	return (sq & 0x80) != (sd << 7);
}

// 是否已过河
inline bool AWAY_HALF(int sq, int sd)
{
	return (sq & 0x80) == (sd << 7);
}

// 是否在河的同一边
inline bool SAME_HALF(int sqSrc, int sqDst)
{
	return ((sqSrc ^ sqDst) & 0x80) == 0;
}

// 是否在同一行
inline bool SAME_RANK(int sqSrc, int sqDst)
{
	return ((sqSrc ^ sqDst) & 0xf0) == 0;
}

// 是否在同一列
inline bool SAME_FILE(int sqSrc, int sqDst)
{
	return ((sqSrc ^ sqDst) & 0x0f) == 0;
}

// 获得红黑标记(红子是8，黑子是16)
inline int SIDE_TAG(int sd)
{
	return 8 + (sd << 3);
}

// 获得对方红黑标记
inline int OPP_SIDE_TAG(int sd)
{
	return 16 - (sd << 3);
}

// 获得走法的起点
inline int SRC(int mv)
{
	return mv & 255;
}

// 获得走法的终点
inline int DST(int mv)
{
	return mv >> 8;
}

// 根据起点和终点获得走法
inline int MOVE(int sqSrc, int sqDst)
{
	//相当于两个字节拼接即 (sqDst << 8) | sqSrc
	return sqSrc + sqDst * 256;
}

// 走法水平镜像
inline int MIRROR_MOVE(int mv)
{
	return MOVE(MIRROR_SQUARE(SRC(mv)), MIRROR_SQUARE(DST(mv)));
}


class Resource: public QObject
{
	Q_OBJECT
public:
	explicit Resource(QObject *parent = nullptr);

	enum Sound
	{
		click,
		capture,
		draw,
		move,
		win,
		check,
		illegal
	};
	Q_ENUM(Sound)
};

#define L qDebug() << "[" << __FILE__ << ":" << __LINE__ << ":" << __func__ << "]"

#endif // CONST_DATA_H
